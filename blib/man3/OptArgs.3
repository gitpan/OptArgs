.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OptArgs 3"
.TH OptArgs 3 "2012-06-13" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OptArgs \- integrated argument and option processing for Perl
.SH "VERSION"
.IX Header "VERSION"
0.0.1 Development release.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OptArgs;
\&
\&    opt quiet => (
\&        isa     => \*(AqBool\*(Aq,
\&        alias   => \*(Aqq\*(Aq,
\&        comment => \*(Aqbe quiet please\*(Aq,
\&    );
\&
\&    arg item => (
\&        isa     => \*(AqStr\*(Aq,
\&        default => 1,
\&        comment => \*(Aqtry this many times\*(Aq,
\&    );
\&
\&    my $ref = optargs;
\&    print "Working on: $ref\->{item}\en" unless $ref\->{quiet};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBOptArgs\fR provides command-line option and argument processing for
Perl scripts.  It is designed to be a very simple way to write programs
using a declarative style. Getopt::Long is used for the underlying
parsing.
.PP
How exactly does one define a command line application? \fBOptArgs\fR
assumes a fairly common (but by no means universal) approach:
.IP "Command" 4
.IX Item "Command"
The program name \- i.e. the filename be executed by the shell.
.IP "Options" 4
.IX Item "Options"
Options are parameters that affect the way a command runs. They are
generally not required to be present, but that is configurable. Options
are prefixed with '\-' for single letter option names or '\-\-' for long
option names.
.IP "Arguments" 4
.IX Item "Arguments"
Arguments are positional parameters that that a command needs know in
order to do its work. Some arguments may be optional.
.IP "Sub-commands" 4
.IX Item "Sub-commands"
A command may also have sub-commands with their own options and
arguments.  From the users point of view sub-commands and their options
are indisinguishable from options and arguments to the main command,
but from an implementation perspective they could (perhaps should) be
separate, stand-alone programs, with possibly their own set of
sub-commands.
.SS "Declaring Options and Arguments"
.IX Subsection "Declaring Options and Arguments"
\&\fBOptArgs\fR exports the following functions for defining Options and
Arguments. The order in which they are defined also determines the
order they appear in usage messages, and the order in which they are
processed.
.ie n .IP "opt name => ( %parameters )" 4
.el .IP "opt name => ( \f(CW%parameters\fR )" 4
.IX Item "opt name => ( %parameters )"
Define a Command Option with the following parameters:
.RS 4
.IP "isa" 4
.IX Item "isa"
Required. Is mapped to a Getopt::Long type according to the
following table:
.Sp
.Vb 9
\&     optargs         Getopt::Long
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&     \*(AqBool\*(Aq          \*(Aq!\*(Aq
\&     \*(AqCounter\*(Aq       \*(Aq+\*(Aq
\&     \*(AqStr\*(Aq           \*(Aq=s\*(Aq
\&     \*(AqInt\*(Aq           \*(Aq=i\*(Aq
\&     \*(AqNum\*(Aq           \*(Aq=f\*(Aq
\&     \*(AqArrayRef\*(Aq      \*(Aqs@\*(Aq
\&     \*(AqHashRef\*(Aq       \*(Aqs%\*(Aq
.Ve
.IP "comment" 4
.IX Item "comment"
Required. Used to generate the usage/help message.
.IP "default" 4
.IX Item "default"
The value set when the option is not used.
.Sp
If this is a subroutine reference it will be called with a hashref
containg all option/argument values after parsing the source has
finished.  The value to be set must be returned, and any changes to the
hashref are ignored.
.IP "alias" 4
.IX Item "alias"
Can be single characters or words separated by '|' if more than one
alias is desired. If the option name contains underscores ('_') then an
alias with '\-' substitutions will be automatically added.
.IP "ishelp" 4
.IX Item "ishelp"
When true flags this option as a help option, which when given on the
command line results in a usage message printed to \fIstdout\fR followed
by an exit with a status of 2.  This flag is basically a shortcut to
save you from doing the following in each (sub) command:
.Sp
.Vb 5
\&    my $opts = optargs;
\&    if ( $opts\->{help} ) {
\&        print usage(\*(Aqhelp requested\*(Aq);
\&        exit 2;
\&    }
.Ve
.RE
.RS 4
.RE
.ie n .IP "arg name => ( %parameters )" 4
.el .IP "arg name => ( \f(CW%parameters\fR )" 4
.IX Item "arg name => ( %parameters )"
Define a Command Argument with the following parameters:
.RS 4
.IP "isa" 4
.IX Item "isa"
Required. Is mapped to a Getopt::Long type according to the
following table:
.Sp
.Vb 8
\&     optargs         Getopt::Long
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&     \*(AqStr\*(Aq           \*(Aq=s\*(Aq
\&     \*(AqInt\*(Aq           \*(Aq=i\*(Aq
\&     \*(AqNum\*(Aq           \*(Aq=f\*(Aq
\&     \*(AqArrayRef\*(Aq      \*(Aqs@\*(Aq
\&     \*(AqHashRef\*(Aq       \*(Aqs%\*(Aq
\&     \*(AqSubCmd\*(Aq        \*(Aq=s\*(Aq
.Ve
.IP "comment" 4
.IX Item "comment"
Required. Used to generate the usage/help message.
.IP "required" 4
.IX Item "required"
Set to a true value when the caller must specify this argument.  Can
not be used if a 'default' is given.
.IP "default" 4
.IX Item "default"
The value set when the argument is not given. Can not be used if
\&'required' is set.
.Sp
If this is a subroutine reference it will be called with a hashref
containg all option/argument values after parsing the source has
finished.  The value to be set must be returned, and any changes to the
hashref are ignored.
.IP "greedy" 4
.IX Item "greedy"
If true the argument swallows the rest of the command line. It doesn't
make sense to define any more arguments once you have used this as they
will never be seen.
.IP "fallback" 4
.IX Item "fallback"
If \f(CW\*(C`isa\*(C'\fR is a \f(CW\*(C`SubCmd\*(C'\fR this option (when set) will stop the
generation of the usage message when the argument is not found as a
sub-command. The current command will be called instead. This option
when set must be a \s-1HASH\s0 reference containing \*(L"name\*(R" and \*(L"comment\*(R"
key/value pairs, which are only used in usage messages.
.RE
.RS 4
.RE
.SS "Parsing and Retrieving Values"
.IX Subsection "Parsing and Retrieving Values"
\&\fBOptArgs\fR exports the following functions for parsing and retriving
option and argument values:
.ie n .IP "optargs( [ @argv ] ) \-> HashRef" 4
.el .IP "optargs( [ \f(CW@argv\fR ] ) \-> HashRef" 4
.IX Item "optargs( [ @argv ] ) -> HashRef"
Parse \f(CW@ARGV\fR by default (or \f(CW@argv\fR when given) and returns a hashref
containing key/value pairs for options and arguments \fIcombined\fR.  An
error / usage exception is thrown if an invalid combination of options
and arguments is given.
.Sp
Note that \f(CW@ARGV\fR will be decoded into \s-1UTF\-8\s0 (if necessary) from
whatever I18N::Langinfo says your environment encoding is.
.SS "Utility Functions"
.IX Subsection "Utility Functions"
.IP "usage([$message]) \-> Str" 4
.IX Item "usage([$message]) -> Str"
Returns a usage string based on the defined opts and args, prefixed
with \f(CW$message\fR if given.
.SS "Writing Sub-Commands"
.IX Subsection "Writing Sub-Commands"
\&\fBOptArgs\fR exports the following functions for defining and running
subcommands.
.ie n .IP "subcmd(@cmd, $description)" 4
.el .IP "subcmd(@cmd, \f(CW$description\fR)" 4
.IX Item "subcmd(@cmd, $description)"
\&\s-1TBD\s0.
.ie n .IP "dispatch($method, $rootclass, [ @argv ])" 4
.el .IP "dispatch($method, \f(CW$rootclass\fR, [ \f(CW@argv\fR ])" 4
.IX Item "dispatch($method, $rootclass, [ @argv ])"
\&\s-1TBD\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Getopt::Long, Exporter::Tidy
.SH "SUPPORT & DEVELOPMENT"
.IX Header "SUPPORT & DEVELOPMENT"
This distribution is managed via github:
.PP
.Vb 1
\&    http://github.com/mlawren/p5\-OptArgs
.Ve
.PP
This distribution follows the semantic versioning model:
.PP
.Vb 1
\&    http://semver.org/
.Ve
.PP
Code is tidied up on Git commit using githook-perltidy:
.PP
.Vb 1
\&    http://github.com/mlawren/githook\-perltidy
.Ve
.PP
Test coverage according to Devel::Cover is as follows:
.PP
.Vb 7
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    File                  stmt  bran  cond   sub   pod  time total
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    blib/lib/optargs.pm   98.8  89.7 100.0 100.0 100.0  91.1  97.0
\&    lib/optargs.pod      100.0   n/a   n/a 100.0   n/a   8.9 100.0
\&    Total                 98.9  89.7 100.0 100.0 100.0 100.0  97.0
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2012 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
